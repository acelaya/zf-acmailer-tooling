<?php
declare(strict_types=1);

namespace AcMailer\Tooling\Command;

use AcMailer\Tooling\Exception;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Zend\ConfigAggregator\ConfigAggregator;
use Zend\ConfigAggregator\PhpFileProvider;

class MigrateConfigCommand extends Command
{
    const CONFIG_FILE_TEMPLATE = <<< 'EOT'
<?php
declare(strict_types=1);

/**
 * This configuration cache file was generated by zf-acmailer-tooling
 * at %s
 */
return %s;

EOT;

    protected function configure()
    {
        $this
            ->setName('config:migrate')
            ->setDescription(
                'Migrates configuration from the structure used in AcMailer v5/v6 to the structure used in v7'
            )
            ->addOption(
                'config-file',
                'c',
                InputOption::VALUE_REQUIRED,
                'The file that will return the project\'s merged configuration. If not provided, it will try to '
                . 'resolve the standard config for both Zend MVC and Expressive'
            )
            ->addOption(
                'output-file',
                'o',
                InputOption::VALUE_REQUIRED,
                'The file in which output config should be dumped '
                . 'If no value is provided, the config will be dumped in the standard output'
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $config = $this->resolveGlobalConfig($input)['acmailer_options'] ?? [];
        if (empty($config)) {
            throw new Exception\RuntimeException(
                'The first level "acmailer_options" config entry was not found or is empty'
            );
        }

        $migratedConfig = ['acmailer_options' => $this->migrateConfig($config)];
        $outputFile = $input->getOption('output-file');
        $generatedConfig = \sprintf(
            self::CONFIG_FILE_TEMPLATE,
            \date(\DateTime::ATOM),
            \var_export($migratedConfig, true)
        );
        if ($outputFile !== null) {
            \file_put_contents($outputFile, $generatedConfig);
        } else {
            $output->writeln($generatedConfig);
        }
    }

    private function resolveGlobalConfig(InputInterface $input): array
    {
        $configFile = $input->getOption('config-file');
        if ($configFile !== null) {
            if (\is_file($configFile)) {
                return require $configFile;
            }

            throw new Exception\UnexpectedValueException(
                \sprintf('Provided config file "%s" does not exist', $configFile)
            );
        }

        // Try to load expressive's global config
        $configFile = getcwd() . '/config/config.php';
        if (\is_file($configFile)) {
            return require $configFile;
        }

        // If not found, try to load MVC's global config
        $appConfigFile = getcwd() . '/config/application.config.php';
        if (\is_file($appConfigFile)) {
            $appConfig = require $appConfigFile;
            return (new ConfigAggregator(\array_map(function (string $glob) {
                return new PhpFileProvider($glob);
            }, $appConfig['module_listener_options']['config_glob_paths'] ?? [])))->getMergedConfig();
        }

        // If none of them was found, throw an exception
        throw new Exception\RuntimeException(
            'It wasn\'t possible to find expressive or Zend MVC standard configurations'
        );
    }

    private function migrateConfig(array $oldConfig): array
    {
        $newConfig = [
            'emails' => [],
            'mail_services' => [],
        ];
        foreach ($oldConfig as $namespace => $config) {
            $newConfig['mail_services'][$namespace] = $this->parseConfigToService($config);
            $newConfig['emails'][$namespace] = $this->parseConfigToEmail($config);
        }

        return $newConfig;
    }

    private function parseConfigToService(array $config): array
    {
        return \array_filter([
            'extends' => $config['extends'] ?? null,
            'transport' => $config['transport'] ?? $config['mail_adapter'] ?? null,
            'transport_options' => $config['smtp_options'] ?? $config['file_options'] ?? null,
            'renderer' => $config['renderer'] ?? null,
            'mail_listeners' => $config['mail_listeners'] ?? null,
        ]);
    }

    private function parseConfigToEmail(array $config): array
    {
        $messageOptions = $config['message_options'] ?? [];
        return \array_filter([
            'from' => $messageOptions['from'] ?? null,
            'from_name' => $messageOptions['from_name'] ?? null,
            'reply_to' => $messageOptions['reply_to'] ?? null,
            'reply_to_name' => $messageOptions['reply_to_name'] ?? null,
            'to' => (array) ($messageOptions['to'] ?? []),
            'cc' => (array) ($messageOptions['cc'] ?? []),
            'bcc' => (array) ($messageOptions['bcc'] ?? []),
            'encoding' => $messageOptions['encoding'] ?? null,
            'subject' => $messageOptions['subject'] ?? null,
            'body' => $messageOptions['body']['content'] ?? null,
            'charset' => $messageOptions['body']['charset'] ?? null,
            'template' => $messageOptions['body']['template']['path'] ?? null,
            'template_params' => \array_merge(
                (array) ($messageOptions['body']['template']['params'] ?? []),
                ['layout' => $messageOptions['body']['template']['default_layout']['path'] ?? null]
            ),
            'attachments' => $messageOptions['attachments']['files'] ?? null,
            'attachments_dir' => $messageOptions['attachments']['dir'] ?? null,
        ]);
    }
}
